c
message
key
DICTIONARY[key]
c
object.name.split.map(&:capitalize).join(' ')
object.name.split..map(&:capitalize).join(' ')
object.name.split
object.name
object.name.split('')
c
self.educations.create
self.experiences.create
c
"#{object.name&.downcase + object.last_name&.downcase }@gmail.com"
"#{object.name&.downcase + object.last_name&.capitalize }@gmail.com"
c
object.name
object.nam
c
object.name
c
@core_infos.pluck(:title)
@core_infos
c
n
c
response = OpenAiService.new(prompt_key, data).call
data = data['value']
prompt_key = data['key']
data = JSON.parse(request.body.read)
c      authorize_resource :education
c
 @core_info
c
@core_info
c
 ->(id) { @id }
find_by: ->(id) { @id }
@id
@core_info
c
@id
JwtHelper.decrypt(@id)
@core_info
c
JwtHelper.decrypt(id) 
@core_info
c
JwtHelper.decrypt(id)
@core_info
c
@core_info
find_by_decrypted_id
decrypt_id
@core_info
c
@core_info
find_by_decrypted_id
@core_info
c@core_info
c
exception
n
c
core_info_params[:data]
core_info_params[:value]
core_info_params[:field]
core_info_params
c
 params.require(:core_infos_transaction).permit(:field, :data)
 params.require(:core_infoa_transaction).permit(:field, :data)
 params.require(:core_info_transaction).permit(:field, :data)
params[:core_info]
params.core_info
params
c
n
@core_info
 params[:id] = JwtHelper.decrypt(params[:token])
params[:id]
JwtHelper.decrypt(params[:token])
c
JSON.parse serialized_core_info
c
JSON.parse serialized_core_info
c
JSON.parse serialized_core_info
Experience.count
c
exit
Experience.count
Experiences.count
JSON.parse serialized_core_info
JSON.parse _
serialized_core_info
c
params[:token]
v
c
params[:token]
c
id
c
id
c
object.experiences
c
object.experiences
object.id
c
object.id
c
object.id
id
c
@core_infos.order(:created_at)c
@core_infos.order(:created_at)
@core_infos.order
@core_infos
c
prompt_key
data
c
request.body.read
data
c
data
c
data
c
data['value']
data['key']
data
c
data
c
data
 c
c
params
c
n
c
e
n
e
n
CoreInfo.find(@id).experiences
CoreInfo.find(@id)
 @id = JwtHelper.decrypt(params[:token])
JwtHelper.decrypt(params[:token])
params[:token]
c
JwtHelper.decrypt(params[:token])
(params[:token])
(params[:token]
c
DICTIONARY[key]
message
response
n
message
#{DICTIONARY[key]
key
c
serialized.class
serialized
c
serialized_core_info.class
c
serialized
c
serialized_core_info
serialized_core_info.to_json
serialized_core_info
c
serialized
c
serialized
c
"#{object.name&.downcase&.gsub(' ', '')}@gmail.com"
n
c
CoreInfosIndexSerializer.new(@core_infos).to_json
ActiveModelSerializers::CoreInfosIndexSerializer.new(@core_infos).to_json
c
@core_infos
c
CoreInfosIndexSerializer.new(@core_infos.to_a).to_json
CoreInfosIndexSerializer.new(@core_infos.to_a)
c
 CoreInfosIndexSerializer.new(@core_infos).as_json
 CoreInfosIndexSerializer.new(@core_infos)
 CoreInfosIndexSerializer.new(@core_infos).to_json
serialized_core_infos.to_json
serialized_core_infos.as_json
serialized_core_infos.to_json
serialized_core_infos.to_h
serialized_core_infos
c
tokens
token
n
@core_infos.pluck(:id)
v
c
tokens
n
 @core_infos.pluck(:id)
c
@core_infos.pluck(:id)
@core_infos
c
@core_infos
c
current_user
@core_infos
c
@core_info
@core_infos
c
current_user.core_infos.pluck(:id)
current_user.core_infos.pluck(:id).as_json
current_user.core_infos.as_json
current_user.core_infos
c
@core_infos
c
payload['resource_id']
payload['data']
field
c
field
params
c
field
c
params['field'].to_sym
DICTIONARY[params['field'].to_sym]
DICTIONARY[params['field']]
DICTIONARY
params['field']
 payload['data']
payload['resource_id']
field
c
payload['resource_id']
field = params['field']
params['field']
payload = params['data']
params['data']
params
c
core_info.experiences.find("22eb4dad-d134-452b-aa8f-2806d9e53f25")
core_info.experiences
